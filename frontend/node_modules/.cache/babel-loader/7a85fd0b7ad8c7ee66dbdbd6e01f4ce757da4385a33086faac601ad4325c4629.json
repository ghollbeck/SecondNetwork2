{"ast":null,"code":"// src/components/API.js\n\nconst base = 'http://localhost:8000'; // Adjust according to your backend URL\n\nconst registerUser = async (username, email, password, bio) => {\n  const response = await fetch(`${base}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      email,\n      password,\n      bio\n    })\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    console.error('Error data:', data); // Log the error data for debugging\n    let errorMessage = 'Registration failed';\n    if (data.detail) {\n      if (Array.isArray(data.detail)) {\n        // Extract messages from the array\n        errorMessage = data.detail.map(err => `${err.msg}`).join(', ');\n      } else if (typeof data.detail === 'string') {\n        errorMessage = data.detail;\n      }\n    }\n    throw new Error(errorMessage);\n  }\n  return data;\n};\n\n// Similarly update loginUser\nconst loginUser = async (email, password) => {\n  const response = await fetch(`${base}/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    console.error('Error data:', data); // Log the error data for debugging\n    let errorMessage = 'Login failed';\n    if (data.detail) {\n      if (Array.isArray(data.detail)) {\n        errorMessage = data.detail.map(err => `${err.msg}`).join(', ');\n      } else if (typeof data.detail === 'string') {\n        errorMessage = data.detail;\n      }\n    }\n    throw new Error(errorMessage);\n  }\n  localStorage.setItem('token', data.access_token);\n  return data;\n};\nconst getProfile = async () => {\n  const token = localStorage.getItem('token');\n  const response = await fetch(`${base}/profile`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.detail || 'Failed to fetch profile');\n  }\n  return data;\n};\nconst updateProfile = async updates => {\n  const token = localStorage.getItem('token');\n  const response = await fetch(`${base}/profile`, {\n    method: 'PUT',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updates)\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.detail || 'Failed to update profile');\n  }\n  return data;\n};\nconst downloadPDF = async () => {\n  const token = localStorage.getItem('token');\n  try {\n    console.log(\"Attempting to download PDF...\");\n    const response = await fetch(`${base}/download_pdf`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to download PDF');\n    }\n\n    // Create a Blob from the response\n    const blob = await response.blob();\n    console.log(\"PDF Blob received.\");\n\n    // Create a link element, hide it, direct it towards the Blob, and trigger a click\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n\n    // Get the filename from the response headers, or use a default name\n    const contentDisposition = response.headers.get('Content-Disposition');\n    let filename = 'downloaded.pdf';\n    if (contentDisposition) {\n      const match = contentDisposition.match(/filename=\"(.+)\"/);\n      if (match && match.length > 1) {\n        filename = match[1];\n      }\n    }\n    console.log(`PDF filename: ${filename}`);\n    link.setAttribute('download', filename); // Set the file name\n    document.body.appendChild(link);\n    link.click(); // Trigger the download\n    document.body.removeChild(link); // Clean up\n\n    // Release the object URL\n    window.URL.revokeObjectURL(url);\n    console.log(\"PDF download triggered successfully.\");\n  } catch (error) {\n    console.error('Error downloading PDF:', error);\n    throw new Error('Error downloading PDF');\n  }\n};\nconst updateBio = async bio => {\n  const token = localStorage.getItem('token');\n  try {\n    const response = await fetch(`${base}/update_bio`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        bio\n      }) // Send the bio as a JSON object\n    });\n    const result = await response.json();\n    if (!response.ok) {\n      throw new Error(result.detail || 'Failed to update bio.');\n    }\n    console.log(\"Bio updated successfully.\");\n    return result;\n  } catch (error) {\n    console.error('Error updating bio:', error);\n    throw new Error('Error updating bio.');\n  }\n};\nconst checkPDF = async () => {\n  const token = localStorage.getItem('token');\n  try {\n    const response = await fetch(`${base}/check_pdf`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    if (!response.ok) {\n      throw new Error(result.detail || 'Failed to check for PDF.');\n    }\n    return result; // result will have { has_pdf: true/false, pdf_filename: '' }\n  } catch (error) {\n    console.error('Error checking PDF:', error);\n    throw new Error('Error checking PDF.');\n  }\n};\nconst updateCustomFields = async customFields => {\n  const token = localStorage.getItem('token');\n  try {\n    const response = await fetch(`${base}/update_custom_fields`, {\n      method: 'PUT',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        custom_fields: customFields\n      })\n    });\n    const result = await response.json();\n    if (!response.ok) {\n      throw new Error(result.detail || 'Failed to update custom fields.');\n    }\n    console.log(\"Custom fields updated successfully.\");\n    return result;\n  } catch (error) {\n    console.error('Error updating custom fields:', error);\n    throw new Error('Error updating custom fields.');\n  }\n};\nexport { registerUser, loginUser, getProfile, updateProfile, downloadPDF, updateBio, checkPDF };","map":{"version":3,"names":["base","registerUser","username","email","password","bio","response","fetch","method","headers","body","JSON","stringify","data","json","ok","console","error","errorMessage","detail","Array","isArray","map","err","msg","join","Error","loginUser","localStorage","setItem","access_token","getProfile","token","getItem","Authorization","updateProfile","updates","downloadPDF","log","blob","url","window","URL","createObjectURL","link","document","createElement","href","contentDisposition","get","filename","match","length","setAttribute","appendChild","click","removeChild","revokeObjectURL","updateBio","result","checkPDF","updateCustomFields","customFields","custom_fields"],"sources":["/Users/gaborhollbeck/Desktop/GitHub/16_SecondNetwork2/SecondNetwork2/frontend/src/components/API.js"],"sourcesContent":["// src/components/API.js\n\nconst base = 'http://localhost:8000'; // Adjust according to your backend URL\n\nconst registerUser = async (username, email, password, bio) => {\n    const response = await fetch(`${base}/register`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, email, password, bio }),\n    });\n    const data = await response.json();\n  \n    if (!response.ok) {\n      console.error('Error data:', data); // Log the error data for debugging\n      let errorMessage = 'Registration failed';\n      if (data.detail) {\n        if (Array.isArray(data.detail)) {\n          // Extract messages from the array\n          errorMessage = data.detail.map((err) => `${err.msg}`).join(', ');\n        } else if (typeof data.detail === 'string') {\n          errorMessage = data.detail;\n        }\n      }\n      throw new Error(errorMessage);\n    }\n    return data;\n  };\n  \n  // Similarly update loginUser\n  const loginUser = async (email, password) => {\n    const response = await fetch(`${base}/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    });\n    const data = await response.json();\n  \n    if (!response.ok) {\n      console.error('Error data:', data); // Log the error data for debugging\n      let errorMessage = 'Login failed';\n      if (data.detail) {\n        if (Array.isArray(data.detail)) {\n          errorMessage = data.detail.map((err) => `${err.msg}`).join(', ');\n        } else if (typeof data.detail === 'string') {\n          errorMessage = data.detail;\n        }\n      }\n      throw new Error(errorMessage);\n    }\n    localStorage.setItem('token', data.access_token);\n    return data;\n  };\n  \n\nconst getProfile = async () => {\n  const token = localStorage.getItem('token');\n  const response = await fetch(`${base}/profile`, {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.detail || 'Failed to fetch profile');\n  }\n  return data;\n};\n\nconst updateProfile = async (updates) => {\n  const token = localStorage.getItem('token');\n  const response = await fetch(`${base}/profile`, {\n    method: 'PUT',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(updates),\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.detail || 'Failed to update profile');\n  }\n  return data;\n};\n\nconst downloadPDF = async () => {\n    const token = localStorage.getItem('token');\n    try {\n        console.log(\"Attempting to download PDF...\");\n        const response = await fetch(`${base}/download_pdf`, {\n            method: 'GET',\n            headers: {\n                Authorization: `Bearer ${token}`,\n            },\n        });\n        \n        if (!response.ok) {\n            throw new Error('Failed to download PDF');\n        }\n\n        // Create a Blob from the response\n        const blob = await response.blob();\n        console.log(\"PDF Blob received.\");\n\n        // Create a link element, hide it, direct it towards the Blob, and trigger a click\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n\n        // Get the filename from the response headers, or use a default name\n        const contentDisposition = response.headers.get('Content-Disposition');\n        let filename = 'downloaded.pdf';\n        if (contentDisposition) {\n            const match = contentDisposition.match(/filename=\"(.+)\"/);\n            if (match && match.length > 1) {\n                filename = match[1];\n            }\n        }\n        console.log(`PDF filename: ${filename}`);\n\n        link.setAttribute('download', filename);  // Set the file name\n        document.body.appendChild(link);\n        link.click();  // Trigger the download\n        document.body.removeChild(link);  // Clean up\n\n        // Release the object URL\n        window.URL.revokeObjectURL(url);\n        console.log(\"PDF download triggered successfully.\");\n    } catch (error) {\n        console.error('Error downloading PDF:', error);\n        throw new Error('Error downloading PDF');\n    }\n};\n\nconst updateBio = async (bio) => {\n    const token = localStorage.getItem('token');\n    try {\n        const response = await fetch(`${base}/update_bio`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`,\n            },\n            body: JSON.stringify({ bio }),  // Send the bio as a JSON object\n        });\n\n        const result = await response.json();\n        if (!response.ok) {\n            throw new Error(result.detail || 'Failed to update bio.');\n        }\n\n        console.log(\"Bio updated successfully.\");\n        return result;\n    } catch (error) {\n        console.error('Error updating bio:', error);\n        throw new Error('Error updating bio.');\n    }\n};\n\n\n\nconst checkPDF = async () => {\n    const token = localStorage.getItem('token');\n    try {\n        const response = await fetch(`${base}/check_pdf`, {\n            method: 'GET',\n            headers: {\n                Authorization: `Bearer ${token}`,\n            },\n        });\n\n        const result = await response.json();\n        if (!response.ok) {\n            throw new Error(result.detail || 'Failed to check for PDF.');\n        }\n\n        return result;  // result will have { has_pdf: true/false, pdf_filename: '' }\n    } catch (error) {\n        console.error('Error checking PDF:', error);\n        throw new Error('Error checking PDF.');\n    }\n};\n\n\n\nconst updateCustomFields = async (customFields) => {\n    const token = localStorage.getItem('token');\n    try {\n        const response = await fetch(`${base}/update_custom_fields`, {\n            method: 'PUT',\n            headers: {\n                Authorization: `Bearer ${token}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ custom_fields: customFields }),\n        });\n\n        const result = await response.json();\n        if (!response.ok) {\n            throw new Error(result.detail || 'Failed to update custom fields.');\n        }\n\n        console.log(\"Custom fields updated successfully.\");\n        return result;\n    } catch (error) {\n        console.error('Error updating custom fields:', error);\n        throw new Error('Error updating custom fields.');\n    }\n};\n\n\n\n\nexport { registerUser, loginUser, getProfile, updateProfile, downloadPDF, updateBio, checkPDF, };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}