{"ast":null,"code":"// src/components/API.js\n\nconst base = 'http://localhost:8000'; // Adjust according to your backend URL\n\nconst registerUser = async (username, email, password, bio) => {\n  const response = await fetch(`${base}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      email,\n      password,\n      bio\n    })\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.detail || 'Registration failed');\n  }\n  return data;\n};\nconst loginUser = async (email, password) => {\n  const response = await fetch(`${base}/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.detail || 'Login failed');\n  }\n  localStorage.setItem('token', data.access_token);\n  return data;\n};\nconst getProfile = async () => {\n  const token = localStorage.getItem('token');\n  const response = await fetch(`${base}/profile`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.detail || 'Failed to fetch profile');\n  }\n  return data;\n};\nconst updateProfile = async updates => {\n  const token = localStorage.getItem('token');\n  const response = await fetch(`${base}/profile`, {\n    method: 'PUT',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updates)\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.detail || 'Failed to update profile');\n  }\n  return data;\n};\nexport { registerUser, loginUser, getProfile, updateProfile };","map":{"version":3,"names":["base","registerUser","username","email","password","bio","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","detail","loginUser","localStorage","setItem","access_token","getProfile","token","getItem","Authorization","updateProfile","updates"],"sources":["/Users/gaborhollbeck/Desktop/GitHub/16_SecondNetwork2/SecondNetwork2/frontend/src/components/API.js"],"sourcesContent":["// src/components/API.js\n\nconst base = 'http://localhost:8000'; // Adjust according to your backend URL\n\nconst registerUser = async (username, email, password, bio) => {\n  const response = await fetch(`${base}/register`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ username, email, password, bio }),\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.detail || 'Registration failed');\n  }\n  return data;\n};\n\nconst loginUser = async (email, password) => {\n  const response = await fetch(`${base}/login`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email, password }),\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.detail || 'Login failed');\n  }\n  localStorage.setItem('token', data.access_token);\n  return data;\n};\n\nconst getProfile = async () => {\n  const token = localStorage.getItem('token');\n  const response = await fetch(`${base}/profile`, {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.detail || 'Failed to fetch profile');\n  }\n  return data;\n};\n\nconst updateProfile = async (updates) => {\n  const token = localStorage.getItem('token');\n  const response = await fetch(`${base}/profile`, {\n    method: 'PUT',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(updates),\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.detail || 'Failed to update profile');\n  }\n  return data;\n};\n\nexport { registerUser, loginUser, getProfile, updateProfile };\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAG,uBAAuB,CAAC,CAAC;;AAEtC,MAAMC,YAAY,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,GAAG,KAAK;EAC7D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,IAAI,WAAW,EAAE;IAC/CQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEV,QAAQ;MAAEC,KAAK;MAAEC,QAAQ;MAAEC;IAAI,CAAC;EACzD,CAAC,CAAC;EACF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,MAAM,IAAI,qBAAqB,CAAC;EACvD;EACA,OAAOJ,IAAI;AACb,CAAC;AAED,MAAMK,SAAS,GAAG,MAAAA,CAAOf,KAAK,EAAEC,QAAQ,KAAK;EAC3C,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,IAAI,QAAQ,EAAE;IAC5CQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAET,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EACF,MAAMS,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,MAAM,IAAI,cAAc,CAAC;EAChD;EACAE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEP,IAAI,CAACQ,YAAY,CAAC;EAChD,OAAOR,IAAI;AACb,CAAC;AAED,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMC,KAAK,GAAGJ,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,IAAI,UAAU,EAAE;IAC9CS,OAAO,EAAE;MAAEgB,aAAa,EAAE,UAAUF,KAAK;IAAG;EAC9C,CAAC,CAAC;EACF,MAAMV,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,MAAM,IAAI,yBAAyB,CAAC;EAC3D;EACA,OAAOJ,IAAI;AACb,CAAC;AAED,MAAMa,aAAa,GAAG,MAAOC,OAAO,IAAK;EACvC,MAAMJ,KAAK,GAAGJ,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,IAAI,UAAU,EAAE;IAC9CQ,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPgB,aAAa,EAAE,UAAUF,KAAK,EAAE;MAChC,cAAc,EAAE;IAClB,CAAC;IACDb,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACe,OAAO;EAC9B,CAAC,CAAC;EACF,MAAMd,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,MAAM,IAAI,0BAA0B,CAAC;EAC5D;EACA,OAAOJ,IAAI;AACb,CAAC;AAED,SAASZ,YAAY,EAAEiB,SAAS,EAAEI,UAAU,EAAEI,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}